# Dev-only workflow with PR Plan comments + manual approval gate before apply
# - Plans on PRs (dev tfvars), posts a sticky PR comment with the plan
# - Applies on merge to main, but waits for manual approval via the "dev" Environment
# - Uses AWS OIDC (no long-lived keys) and caches providers
#
# Setup steps (once):
# 1) Repo Settings → Actions → Variables: set AWS_REGION (e.g., us-east-1)
# 2) Repo Settings → Actions → Variables or Secrets: set AWS_ROLE_ARN = arn:aws:iam::<acct>:role/GitHubActionsTerraformRole
# 3) Repo Settings → Environments → New environment "dev" → Required reviewers (your account)
# 4) Branch protection on main: require PRs + status checks (fmt_validate, plan_dev) before merge
# 5) Ensure envs/dev/terraform.tfvars exists in the repo

name: Terraform (dev)

on:
  pull_request:
    paths:
      - '**/*.tf'
      - 'envs/**'
      - '.github/workflows/terraform.yml'
  push:
    branches: [ main ]
    paths:
      - '**/*.tf'
      - 'envs/**'
      - '.github/workflows/terraform.yml'
  workflow_dispatch:

permissions:
  id-token: write      # for AWS OIDC
  contents: read
  pull-requests: write # to comment on PRs

env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  TF_IN_AUTOMATION: 'true'
  TF_INPUT: 'false'
  TF_CLI_ARGS: '-no-color'
  TF_PLUGIN_CACHE_DIR: .terraform/plugin-cache

concurrency:
  group: terraform-${{ github.ref }}
  cancel-in-progress: true

jobs:
  fmt_validate:
    name: Format & Validate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8

      - name: Cache Terraform providers
        uses: actions/cache@v4
        with:
          path: .terraform/plugin-cache
          key: ${{ runner.os }}-tf-${{ hashFiles('**/.terraform.lock.hcl') }}

      - name: Init (no backend)
        run: terraform init -backend=false

      - name: terraform fmt & validate
        run: |
          terraform fmt -check -recursive
          terraform validate

  plan_dev:
    name: Plan (dev) + PR comment
    needs: fmt_validate
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8

      - name: Cache Terraform providers
        uses: actions/cache@v4
        with:
          path: .terraform/plugin-cache
          key: ${{ runner.os }}-tf-${{ hashFiles('**/.terraform.lock.hcl') }}

      - name: Check dev var-file exists
        run: |
          test -f "envs/dev/terraform.tfvars" || { echo "Missing envs/dev/terraform.tfvars"; exit 1; }

      - name: Terraform Init
        run: terraform init -reconfigure

      - name: Terraform Plan (dev)
        run: terraform plan -lock-timeout=2m -var-file="envs/dev/terraform.tfvars" -out=tfplan

      - name: Render plan to file
        run: terraform show -no-color tfplan > plan.txt

      - name: Sticky PR comment with plan
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: terraform-plan
          path: plan.txt

      - name: Attach plan artifact (optional)
        uses: actions/upload-artifact@v4
        with:
          name: tfplan-dev
          path: tfplan

  apply_dev:
    name: Apply (dev) — requires approval
    needs: fmt_validate
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: dev   # gate with required reviewers in Settings → Environments
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ vars.AWS_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.9.8

      - name: Cache Terraform providers
        uses: actions/cache@v4
        with:
          path: .terraform/plugin-cache
          key: ${{ runner.os }}-tf-${{ hashFiles('**/.terraform.lock.hcl') }}

      - name: Terraform Init
        run: terraform init -reconfigure

      - name: Terraform Plan (for apply)
        run: terraform plan -lock-timeout=2m -var-file="envs/dev/terraform.tfvars" -out=tfplan

      - name: Summarize plan
        run: |
          echo '### Terraform Plan (dev, post-merge)' >> $GITHUB_STEP_SUMMARY
          terraform show -no-color tfplan | sed -n '1,300p' >> $GITHUB_STEP_SUMMARY

      - name: Terraform Apply
        run: terraform apply -auto-approve tfplan

